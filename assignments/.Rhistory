ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = "Survival Curve for (Mental Illness Detected)",
xlim = c(0, 900))
reason_to_join = as.data.frame(table(Patient_Data$Reason_Caregiver))
reason_to_join
library(ggplot2)
reason_to_join <- as.data.frame(table(Patient_Data$Reason_Caregiver))
names(reason_to_join) <- c("Reason", "Count")
ggplot(reason_to_join, aes(x = Reason, y = Count)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Reasons for Joining",
x = "Reason",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
reasons <- c("Accessibility", "Adequate care", "Assist", "Better care",
"Care and support", "Chronic Condition", "Close monitoring",
"Close monitoring epilepsy", "Companionship", "Companionship and care",
"Companionship and support", "Compassionate", "Condition",
"Convinience", "Extra help", "Family engagement", "Loneliness",
"Management", "Monitoring", "ompnaionship and post care",
"Patient Condition", "Patient discharged", "Patient lives alone",
"Peace of Mind", "Personalised Care", "Post care", "Post Hospital Care",
"Post surgery", "Preference", "Provide Care", "Recommended by a doctor",
"Recovery", "Specialised care", "Supervission", "Support", "Total Care")
categories <- list(
"Patient condition" = c("Patient Condition", "Specialised care", "Condition", "Recommended by a doctor", "Chronic Condition"),
"Care and support" = c("Care and support", "Support", "Assist", "Provide Care", "Extra help", "Better care"),
"Companionship" = c("Companionship", "Loneliness", "Companionship and care", "Companionship and support", "Compassionate"),
"Convenience" = c("Convinience", "Family engagement", "Patient lives alone", "Accessibility", "Peace of Mind", "Preference"),
"Recovery" = c("Recovery", "Post surgery", "Management", "Patient discharged", "Post care", "Post Hospital Care"),
"Total Care" = c("Total Care", "Adequate care", "Personalised Care"),
"Monitoring" = c("Monitoring", "Close monitoring", "Supervission")
)
reason_to_category <- unlist(lapply(names(categories), function(category) {
setNames(rep(category, length(categories[[category]])), categories[[category]])
}))
plot_reasons_percentage <- function(data, title) {
data$Reason_Caregiver_Category <- reason_to_category[data$Reason_Caregiver]
reason_to_join_category <- as.data.frame(table(data$Reason_Caregiver_Category))
names(reason_to_join_category) <- c("Category", "Count")
total_responses <- sum(reason_to_join_category$Count)
reason_to_join_category$Percentage <- (reason_to_join_category$Count / total_responses) * 100
ggplot(reason_to_join_category, aes(x = Category, y = Percentage)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = title,
x = "Category",
y = "Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
resident <- Patient_Data %>% filter(Facility_Type == "Inpatient")
non_resident <- Patient_Data %>% filter(Facility_Type == "Home-care")
plot_residents <- plot_reasons_percentage(resident, "Summarized Reasons for Joining (Inpatient)")
print(plot_residents)
plot_non_residents <- plot_reasons_percentage(non_resident, "Summarized Reasons for Joining (Home-care)")
print(plot_non_residents)
c("duration", "event_observed") %in% colnames(Patient_Data)
Patient_Data$duration = surv_Data$duration
Patient_Data$event_observed = surv_Data$event_observed
Patient_Data$Date_Ended = clean_Data$Date_Ended
Patient_Data$Date_Started = clean_Data$Date_Started
writexl::write_xlsx(Patient_Data, "Task2_data.xlsx")
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/survival analysis/assignments")
knitr::opts_chunk$set(echo = TRUE)
xlim_global <- c(0, 1200)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
head(Patient_Data)
Patient_Data[seq(190, 198),]
Patient_Data = Patient_Data[seq(1, 189, 1),]
Patient_Data[is.na(Patient_Data$Date_Started),]
Patient_Data[is.na(Patient_Data$Date_Ended),]
library(dplyr)
Patient_Data = Patient_Data %>% filter(!is.na(Date_Started))
Patient_Data[is.na(Patient_Data$Date_Ended),]$Date_Ended = 'Ongoing'
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
Patient_Data$Date_Ended[Patient_Data$Date_Ended == "04/12/923"] = as.Date("2023-12-04")
unique(Patient_Data$Facilty_Type)
# cols_pat = colnames(Patient_Data)
# cols_pat[3] = "Facility_Type"
# colnames(Patient_Data) = cols_pat
# colnames(Patient_Data)[3]
library(dplyr)
Patient_Data = Patient_Data %>% mutate(
Facilty_Type = ifelse(Facilty_Type == "non Resident", "Non Resident", Facilty_Type)
)
Patient_Data = Patient_Data %>% rename(Facility_Type = Facilty_Type)
Patient_Data <- Patient_Data %>%
mutate(Facility_Type = ifelse(Facility_Type == "Non Resident", "Home-care",
ifelse(Facility_Type == "Resident", "Inpatient", NA)))
Patient_Data$Facility_Type = factor(Patient_Data$Facility_Type, levels = c("Home-care", "Inpatient"))
unique(Patient_Data$Facility_Type)
library(dplyr)
# there is a challenge with casting in dplyr a step by step process is the best option
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date_b = date[!is.na(date) & date != "2024-06-04"]
date[!is.na(date) & date != "2024-06-04"] = as.character(as.Date(as.numeric(date_b), origin = "1899-12-30"))
# format to standard date format
date
clean_Data = Patient_Data
clean_Data$Date_Ended = date
clean_Data = clean_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
head(clean_Data)
a = clean_Data[c(140, 33, 58), ]$Date_Started
clean_Data[148,]$Date_Started = as.Date("2023-12-15")
b = clean_Data[c(140, 33, 58), ]$Date_Ended
clean_Data[c(140, 33, 58), ]$Date_Started = b
clean_Data[c(140, 33, 58), ]$Date_Ended = a
clean_Data[c(148, 140, 33, 58), ]$Date_Ended
clean_Data[c(148, 140, 33, 58), ]$Date_Started
# clean_Data = clean_Data %>% filter(Date_Started <= Date_Ended)
# head(clean_Data)
if (any(clean_Data$Date_Started > clean_Data$Date_Ended, na.rm = TRUE)) {
swap_dates = clean_Data$Date_Started > clean_Data$Date_Ended
clean_Data[swap_dates, c("Date_Started", "Date_Ended")] = clean_Data[swap_dates, c("Date_Ended", "Date_Started")]
result = nrow(clean_Data) == 187  # Confirm that no data has been lost
} else {
result = nrow(clean_Data) == 187
}
print(result) # will print True because no data is lost
library(survival)
library(survminer)
surv_Data = data.frame(duration = as.numeric(clean_Data$Date_Ended - clean_Data$Date_Started),
event_observed = ifelse(!is.na(clean_Data$Date_Ended) & clean_Data$Date_Ended != "2024-06-04", 1, 0))
head(surv_Data)
clean_Data$duration = surv_Data$duration
clean_Data$event_observed = surv_Data$event_observed
surv_obj = Surv(time = surv_Data$duration, event = surv_Data$event_observed)
km_fit = survfit(surv_obj~Facility_Type, data = clean_Data)
summary(km_fit)
ggsurvplot(km_fit, data = clean_Data,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve Based on Facility Type",
xlim = c(0, 900))
clean_resident = clean_Data %>% filter(Facility_Type == "Inpatient")
clean_non_resident = clean_Data %>% filter(Facility_Type == "Home-care")
haz_fit = coxph(surv_obj~1, data = clean_Data)
# baseline hazard function
base_haz = basehaz(haz_fit, centered = F)
summary(haz_fit)
breaks = c(3, 6, 9, 18, 180, 360, 720, 820)
ggplot(base_haz, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function")+
scale_x_continuous(breaks = breaks, limits = c(0, 820))
haz_fit_resident = coxph(Surv(time = duration, event = event_observed)~1, data = clean_resident)
base_haz_resident = basehaz(haz_fit_resident, centered = F)
summary(haz_fit_resident)
ggplot(base_haz_resident, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function for Inpatient")+
scale_x_continuous(breaks = breaks, limits = c(0, 820))
haz_fit_non_resident = coxph(Surv(time = duration, event = event_observed)~1, data = clean_non_resident)
base_haz_non_resident = basehaz(haz_fit_non_resident, centered = F)
summary(haz_fit_non_resident)
ggplot(base_haz_non_resident, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function for Home-care")+
scale_x_continuous(breaks = breaks, limits = c(0, 820))
library(survival)
ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve",
xlim = c(0, 900))
km_fit_resident = survfit(Surv(time = duration, event = event_observed)~1, data = clean_resident)
summary(km_fit_resident)
ggsurvplot(km_fit_resident, data = clean_resident,
conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 820))
ggsurvplot(km_fit_resident, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve Inpatient")
km_fit_non_resident = survfit(Surv(time = duration, event = event_observed)~1, data = clean_non_resident)
summary(km_fit_non_resident)
ggsurvplot(km_fit_non_resident, data = clean_non_resident,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve",
xlim = c(0, 900))
ggsurvplot(km_fit_non_resident, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve Home-care",
xlim = c(0, 900))
cols_depression = c("Pleasure_doingthings", "Depressed", "Sleep", "Energy",      "Appetite", "Bad_About_Myself", "Concentration", "Speak_Slowly",            "Thoughts")
unique_values = lapply(clean_Data[cols_depression], unique)
unique_values
clean_Data <- clean_Data %>%
mutate(across(all_of(cols_depression), ~ case_when(
.x %in% c("s", "S") ~ "Somewhat",
.x %in% c("n", "N") ~ "Not difficult",
.x %in% c("e", "E") ~ "Extremely difficult",
TRUE ~ .x
)))
unique_values = lapply(clean_Data[cols_depression], unique)
unique_values
clean_Data = clean_Data %>%
mutate(across(all_of(cols_depression), ~ ifelse(.x == "Not difficult", 0,
ifelse(.x == "Somewhat", 1,
ifelse(.x == "Very difficult", 2,
ifelse(.x == "Extremely difficult", 3, NA))))))
unique_values = lapply(clean_Data[cols_depression], unique)
unique_values
clean_Data = clean_Data %>% rowwise() %>%
mutate(dep_ind = sum(c_across(all_of(cols_depression)), na.rm = TRUE)) %>%
ungroup()
depression_index = as.data.frame(table(clean_Data$dep_ind))
depression_index
clean_Data = clean_Data %>% mutate(dep_lvl = case_when(
dep_ind >= 0 & dep_ind <= 4 ~ "None_minimal",
dep_ind >= 5 & dep_ind <= 9 ~ "Mild Depression",
dep_ind >= 10 & dep_ind <= 14 ~ "Moderate Depression",
dep_ind >= 15 & dep_ind <= 19 ~ "Moderate Severe",
dep_ind >= 20 & dep_ind <= 27 ~ "Severe Depression",
T~ NA_character_
))
depression_level = as.data.frame(table(clean_Data$dep_lvl))
depression_level
library(tidyverse)
ages <- clean_Data %>% select(Age, Age_Client)
summary(ages)
ggplot(ages, aes(x = Age, y = Age_Client)) +
geom_point() +
labs(title = "Relationship between Age of Patient and Age of Client",
x = "Age of Patient",
y = "Age of Client") +
theme_minimal()
cor(ages)
cov(ages)
diseases = Patient_Data %>%
select(Facility_Type,
Cardiac_Condition,
Hypertention_Condition,
Pulmonary_Condition,
Kidney_Condition...72,
Obesity,
Liver_Condition,
Neurological_Disorder,
Diabetes,
Rheumatology,
TB,
HIV,
Athritis,
Stroke,
Cancer,
`Mental and Dementia`,
Advanced_Age,
After_Surgery,
Fracture)
long_diseases = diseases %>%
pivot_longer(cols = -Facility_Type, names_to = "Condition", values_to = "Presence")
long_diseases
condition_counts <- long_diseases %>%
filter(Presence == "Yes") %>%
count(Condition, Facility_Type, sort = TRUE)
condition_counts
ggplot(condition_counts, aes(x = reorder(Condition, n), y = n, fill = Facility_Type)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Inpatient" = "orange", "Home-care" = "darkgreen")) +
coord_flip() +
labs(title = "Percentages of Pre-existing Conditions Among Patients",
x = "Medical Condition",
y = "Percentage") +
theme_minimal()
Patient_Data <- Patient_Data %>%
mutate(Other_Detected = ifelse(!is.na(Other_Detected) & Other_Detected != "", "Yes", "No"))
selected_columns <- Patient_Data %>%
select(Facility_Type,
Cardiac_Detected,
Hypertention_Detected,
Pulmonary_Detected,
Kidney_Condition...107,
Obesity_Detected,
Liver_Detected,
Neurological_Detected,
Diabetes_Detected,
Rheumatology_Detected,
TB_Detected,
HIV_Detected,
Athritis_Detected,
Stroke_Detected,
Cancer_Detected,
Mental_Detected,
Age_Detected,
Other_Detected)
long_detected <- selected_columns %>%
pivot_longer(cols = -Facility_Type, names_to = "Condition", values_to = "Presence")
long_detected
detected_condition_counts <- long_detected %>%
filter(Presence == "Yes") %>%
count(Condition,Facility_Type, sort = TRUE)
detected_condition_counts = na.omit(detected_condition_counts)
detected_condition_counts
ggplot(detected_condition_counts, aes(x = reorder(Condition, n), y = n, fill = Facility_Type)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("Inpatient" = "orange", "Home-care" = "darkgreen")) +
coord_flip() +
labs(title = "Frequencies of Detected Conditions Among Patients",
x = "Medical Condition",
y = "Frequency") +
theme_minimal()
columns_int = c("Cardiac_Detected",
"Hypertention_Detected",
"Pulmonary_Detected",
"Kidney_Condition...107",
"Obesity_Detected",
"Liver_Detected",
"Neurological_Detected",
"Diabetes_Detected",
"Rheumatology_Detected",
"TB_Detected",
"HIV_Detected",
"Athritis_Detected",
"Stroke_Detected",
"Cancer_Detected",
"Mental_Detected",
"Age_Detected",
"Other_Detected")
interest_disease = clean_Data %>%
select(duration,
event_observed,
Facility_Type,
Cardiac_Detected,
Hypertention_Detected,
Pulmonary_Detected,
Kidney_Condition...107,
Obesity_Detected,
Liver_Detected,
Neurological_Detected,
Diabetes_Detected,
Rheumatology_Detected,
TB_Detected,
HIV_Detected,
Athritis_Detected,
Stroke_Detected,
Cancer_Detected,
Mental_Detected,
Age_Detected,
Other_Detected)
interest_disease <- interest_disease %>%
mutate(Other_Detected = ifelse(!is.na(Other_Detected) & Other_Detected != "", "Yes", "No"))
surv_disease <- Surv(interest_disease$duration, interest_disease$event_observed)
interest_disease_count = interest_disease %>%
mutate(across(all_of(columns_int), ~ ifelse(!is.na(.) & . != "", "Yes", ifelse(is.na(.), NA, "No"))))
count_response = interest_disease_count %>%
pivot_longer(cols = all_of(columns_int), names_to = "Disease", values_to = "Detection") %>%
group_by(Disease, Detection) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = Detection, values_from = Count, values_fill = list(Count = 0))
count_response
interest_disease = interest_disease %>%
mutate(across(all_of(columns_int), ~ifelse(is.na(.) |. == "", "No", "Yes")))
surv_dses = Surv(time = interest_disease$duration, event = interest_disease$event_observed)
data_yes_list <- list()
data_no_list <- list()
disease_columns = colnames(interest_disease[,4:ncol(interest_disease)])
min_required_yes <- 5
min_required_no <- 5
filtered_columns <- disease_columns[sapply(disease_columns, function(col) {
yes_count <- sum(interest_disease[[col]] == "Yes")
no_count <- sum(interest_disease[[col]] == "No")
yes_count >= min_required_yes && no_count >= min_required_no
})]
for (col in filtered_columns) {
data_yes_list[[col]] <- interest_disease %>% filter(get(col) == "Yes")
data_no_list[[col]] <- interest_disease %>% filter(get(col) == "No")
}
fit_and_plot <- function(column, data_yes, data_no) {
formula <- as.formula(paste("Surv(time = duration, event = event_observed)~", column))
# Fit the survival curves for "Yes" and "No" subsets
fit_yes <- survfit(formula, data = as.data.frame(data_yes))
fit_no <- survfit(formula, data = as.data.frame(data_no))
# Plot the survival curves
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
}
filtered_columns
interest_disease$Hypertention_Detected = as.factor(interest_disease$Hypertention_Detected)
fit = surv_fit(surv_dses~Hypertention_Detected, data = interest_disease)
ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = "Survival Curve for (Hypertention Detected)",
xlim = c(0, 900))
interest_disease$Mental_Detected = as.factor(interest_disease$Mental_Detected)
fit = surv_fit(surv_dses~Mental_Detected, data = interest_disease)
ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = "Survival Curve for (Mental Illness Detected)",
xlim = c(0, 900))
reason_to_join = as.data.frame(table(Patient_Data$Reason_Caregiver))
reason_to_join
library(ggplot2)
reason_to_join <- as.data.frame(table(Patient_Data$Reason_Caregiver))
names(reason_to_join) <- c("Reason", "Count")
ggplot(reason_to_join, aes(x = Reason, y = Count)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Reasons for Joining",
x = "Reason",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
reasons <- c("Accessibility", "Adequate care", "Assist", "Better care",
"Care and support", "Chronic Condition", "Close monitoring",
"Close monitoring epilepsy", "Companionship", "Companionship and care",
"Companionship and support", "Compassionate", "Condition",
"Convinience", "Extra help", "Family engagement", "Loneliness",
"Management", "Monitoring", "ompnaionship and post care",
"Patient Condition", "Patient discharged", "Patient lives alone",
"Peace of Mind", "Personalised Care", "Post care", "Post Hospital Care",
"Post surgery", "Preference", "Provide Care", "Recommended by a doctor",
"Recovery", "Specialised care", "Supervission", "Support", "Total Care")
categories <- list(
"Patient condition" = c("Patient Condition", "Specialised care", "Condition", "Recommended by a doctor", "Chronic Condition"),
"Care and support" = c("Care and support", "Support", "Assist", "Provide Care", "Extra help", "Better care"),
"Companionship" = c("Companionship", "Loneliness", "Companionship and care", "Companionship and support", "Compassionate"),
"Convenience" = c("Convinience", "Family engagement", "Patient lives alone", "Accessibility", "Peace of Mind", "Preference"),
"Recovery" = c("Recovery", "Post surgery", "Management", "Patient discharged", "Post care", "Post Hospital Care"),
"Total Care" = c("Total Care", "Adequate care", "Personalised Care"),
"Monitoring" = c("Monitoring", "Close monitoring", "Supervission")
)
reason_to_category <- unlist(lapply(names(categories), function(category) {
setNames(rep(category, length(categories[[category]])), categories[[category]])
}))
plot_reasons_percentage <- function(data, title) {
data$Reason_Caregiver_Category <- reason_to_category[data$Reason_Caregiver]
reason_to_join_category <- as.data.frame(table(data$Reason_Caregiver_Category))
names(reason_to_join_category) <- c("Category", "Count")
total_responses <- sum(reason_to_join_category$Count)
reason_to_join_category$Percentage <- (reason_to_join_category$Count / total_responses) * 100
ggplot(reason_to_join_category, aes(x = Category, y = Percentage)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = title,
x = "Category",
y = "Percentage (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
resident <- Patient_Data %>% filter(Facility_Type == "Inpatient")
non_resident <- Patient_Data %>% filter(Facility_Type == "Home-care")
plot_residents <- plot_reasons_percentage(resident, "Summarized Reasons for Joining (Inpatient)")
print(plot_residents)
plot_non_residents <- plot_reasons_percentage(non_resident, "Summarized Reasons for Joining (Home-care)")
print(plot_non_residents)
c("duration", "event_observed") %in% colnames(Patient_Data)
Patient_Data$duration = surv_Data$duration
Patient_Data$event_observed = surv_Data$event_observed
Patient_Data$Date_Ended = clean_Data$Date_Ended
Patient_Data$Date_Started = clean_Data$Date_Started
writexl::write_xlsx(Patient_Data, "Task2_data.xlsx")
