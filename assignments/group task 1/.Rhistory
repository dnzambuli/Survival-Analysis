formula <- as.formula(paste("surv_disease ~", column))
# Check for empty subsets and skip if any subset is empty
if (nrow(data_yes) == 0 || nrow(data_no) == 0) {
warning(paste("No data available for 'Yes' or 'No' in column", column))
return(NULL)
}
# Fit the survival curves for "Yes" and "No" subsets
fit_yes <- survfit(formula, data = data_yes)
fit_no <- survfit(formula, data = data_no)
# Plot the survival curves
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
}
for (col in disease_columns) {
print(fit_and_plot(col, data_yes_list[[col]], data_no_list[[col]]))
}
fit_and_plot <- function(column, data_yes, data_no) {
formula <- as.formula(paste("surv_dses~", column))
# Check for empty subsets and skip if any subset is empty
if (nrow(data_yes) == 0 || nrow(data_no) == 0) {
warning(paste("No data available for 'Yes' or 'No' in column", column))
return(NULL)
}
# Fit the survival curves for "Yes" and "No" subsets
fit_yes <- survfit(formula, data = data_yes)
fit_no <- survfit(formula, data = data_no)
# Plot the survival curves
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
}
for (col in disease_columns) {
print(fit_and_plot(col, data_yes_list[[col]], data_no_list[[col]]))
}
data_yes_list <- list()
data_no_list <- list()
disease_columns = colnames(interest_disease)[4:20]
for (col in disease_columns) {
data_yes_list[[col]] <- interest_disease %>% filter(get(col) == "Yes")
data_no_list[[col]] <- interest_disease %>% filter(get(col) == "No")
if (nrow(data_yes_list[[col]]) > 0 && nrow(data_no_list[[col]]) > 0) {
if (any(sapply(data_yes_list[[col]], length) != sapply(data_no_list[[col]], length))) {
stop(paste("Inconsistent lengths found in column", col))
}
}
}
data_yes_list <- list()
data_no_list <- list()
min_required_yes <- 5
min_required_no <- 5
filtered_columns <- disease_columns[sapply(disease_columns, function(col) {
yes_count <- sum(interest_disease[[col]] == "Yes")
no_count <- sum(interest_disease[[col]] == "No")
yes_count >= min_required_yes && no_count >= min_required_no
})]
for (col in filtered_columns) {
data_yes_list[[col]] <- interest_disease %>% filter(get(col) == "Yes")
data_no_list[[col]] <- interest_disease %>% filter(get(col) == "No")
}
fit_and_plot <- function(column, data_yes, data_no) {
formula <- as.formula(paste("surv_dses~", column))
# Check for empty subsets and skip if any subset is empty
if (nrow(data_yes) == 0 || nrow(data_no) == 0) {
warning(paste("No data available for 'Yes' or 'No' in column", column))
return(NULL)
}
# Fit the survival curves for "Yes" and "No" subsets
fit_yes <- survfit(formula, data = data_yes)
fit_no <- survfit(formula, data = data_no)
# Plot the survival curves
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
}
for (col in filtered_columns) {
print(fit_and_plot(col, data_yes_list[[col]], data_no_list[[col]]))
}
fit_and_plot("Hypertention_Detected", data_yes_list[["Hypertention_Detected"]], data_no_list[[""]])
fit_and_plot <- function(column, data_yes, data_no) {
formula <- as.formula(paste("surv_dses~", column))
# Fit the survival curves for "Yes" and "No" subsets
fit_yes <- survfit(formula, data = data_yes)
fit_no <- survfit(formula, data = data_no)
# Plot the survival curves
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
}
for (col in filtered_columns) {
print(fit_and_plot(col, data_yes_list[[col]], data_no_list[[col]]))
}
filtered_columns
fit_and_plot("Hypertention_Detected", data_yes_list[["Hypertention_Detected"]], data_no_list[["Hypertention_Detected"]])
data_yes_list[["Hypertention_Detected"]]
as.data.frame(data_yes_list[["Hypertention_Detected"]])
fit_and_plot <- function(column, data_yes, data_no) {
formula <- as.formula(paste("surv_dses~", column))
# Fit the survival curves for "Yes" and "No" subsets
fit_yes <- survfit(formula, data = as.data.frame(data_yes))
fit_no <- survfit(formula, data = as.data.frame(data_no))
# Plot the survival curves
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
}
for (col in filtered_columns) {
print(fit_and_plot(col, data_yes_list[[col]], data_no_list[[col]]))
}
fit_and_plot("Hypertention_Detected", data.frame(data_yes_list[["Hypertention_Detected"]]), data.frame(data_no_list[["Hypertention_Detected"]]))
filtered_columns
formula <- as.formula(paste("surv_dses~", "Hypertention_Detected"))
fit_yes <- survfit(formula, data = data_yes_list[["Hypertention_Detected"]])
formula <- as.formula(paste("surv_dses~", "Hypertention_Detected"))
fit_yes <- survfit(formula, data = as.data.frame( data_yes_list[["Hypertention_Detected"]]))
fit_and_plot <- function(column, data_yes, data_no) {
formula <- as.formula(paste("Surv(time = duration, event = event_observed)~", column))
# Fit the survival curves for "Yes" and "No" subsets
fit_yes <- survfit(formula, data = as.data.frame(data_yes))
fit_no <- survfit(formula, data = as.data.frame(data_no))
# Plot the survival curves
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
}
fit_and_plot(filtered_columns[1])
fit_and_plot("Hypertention_Detected", data_yes_list[["Hypertention_Detected"]], data_no_list[["Hypertention_Detected"]])
formula <- as.formula(paste("Surv(time = duration, event = event_observed)~", "Hypertention_Detected"))
fit_yes <- survfit(formula, data = as.data.frame( data_yes_list[["Hypertention_Detected"]]))
fit_no <- survfit(formula, data =as.data.frame(data_no_list[["Hypertention_Detected"]]))
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
formula <- as.formula(paste("Surv(time = duration, event = event_observed)~", as.character("Hypertention_Detected")))
fit_yes <- survfit(formula, data = as.data.frame( data_yes_list[["Hypertention_Detected"]]))
fit_no <- survfit(formula, data =as.data.frame(data_no_list[["Hypertention_Detected"]]))
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
survfit(formula = formula, data = data_yes_list[["Hypertention_Detected"]])
survfit(formula = formula, data = data_no_list[["Hypertention_Detected"]])
formula <- as.formula(paste("Surv(time = duration, event = event_observed)~", as.character("Hypertention_Detected")))
fit_yes <- survfit(formula, data = data_yes_list[["Hypertention_Detected"]])
fit_no <- survfit(formula, data =data_no_list[["Hypertention_Detected"]])
ggsurvplot(list(Yes = fit_yes, No = fit_no),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
ggsurvplot(list(Yes = survfit(formula = formula, data = data_yes_list[["Hypertention_Detected"]]), No = survfit(formula = formula, data = data_no_list[["Hypertention_Detected"]])),
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
interest_disease$Hypertention_Detected = as.factor(interest_disease$Hypertention_Detected)
fit = surv_fit(surv_dses~Hypertention_Detected, data = interest_disease)
ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", column))
interest_disease$Mental_Detected = as.factor(interest_disease$Mental_Detected)
fit = surv_fit(surv_dses~Mental_Detected, data = interest_disease)
ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", Mental_Detected))
colnames(interest_disease)
interest_disease$Mental_Detected = as.factor(interest_disease$Mental_Detected)
fit = surv_fit(surv_dses~Mental_Detected, data = interest_disease)
ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", Mental_Detected))
interest_disease$Mental_Detected
fit
interest_disease$Mental_Detected = as.factor(interest_disease$Mental_Detected)
fit = surv_fit(surv_dses~Mental_Detected, data = interest_disease)
ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = paste("Survival Curve for", as.character(Mental_Detected)))
interest_disease$Mental_Detected = as.factor(interest_disease$Mental_Detected)
fit = surv_fit(surv_dses~Mental_Detected, data = interest_disease)
ggsurvplot(fit,
data = interest_disease,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE,
linetype = "strata",
surv.median.line = "hv",
ggtheme = theme_minimal(),
title = "Survival Curve for (Mental Illness Detected)")
ggplot(base_haz, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
haz_fit_resident = coxph(Surv(time = duration, event = event_observed)~1, data = clean_resident)
base_haz_resident = basehaz(haz_fit_resident, centered = F)
summary(haz_fit_resident)
ggplot(base_haz_resident, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function for In-Patient")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
haz_fit_non_resident = coxph(Surv(time = duration, event = event_observed)~1, data = clean_non_resident)
base_haz_non_resident = basehaz(haz_fit_non_resident, centered = F)
summary(haz_fit_non_resident)
ggplot(base_haz_non_resident, aes(x = time, y = hazard))+
geom_line()+
labs(x = "Days",
y = "Hazard",
title = "Baseline Hazard Function for Out-Patient")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
library(survival)
p = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
p$plot = p$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
p
library(survival)
c = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
c$plot = c$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
c
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
c = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
c$plot = c$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
c
km_fit_resident = survfit(Surv(time = duration, event = event_observed)~1, data = clean_resident)
summary(km_fit_resident)
ggsurvplot(km_fit_resident, data = clean_resident,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")
ggsurvplot(km_fit_resident, data = clean_resident,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")+
scale_x_continuous(breaks = breaks, limits = c(0, 900))
ggsurvplot(km_fit_resident, data = clean_resident,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
c = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
c
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve") +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")$plot +
scale_x_continuous(breaks = breaks, limits = c(0, 900))
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
a = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
a$plot = $plot +
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
a = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
a$plot = a$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
print(a)
breaks <- c(6, 18, 36, 54, seq(100, 820, by = 100))
library(survival)
a = ggsurvplot(km_fit, fun = "cumhaz",
xlab = "Days",
ylab = "Cumulative Hazard",
title = "Nelson-Aalen Cumulative Hazard Curve")
a$plot = a$plot + scale_x_continuous(breaks = breaks, limits = c(0, 900))
print(a$plot)
setwd("C:/Users/ADMIN/Documents/SEM 2 2024/survival analysis/assignments/group task 1")
knitr::opts_chunk$set(echo = TRUE)
xlim_global <- c(0, 1200)
library(readxl)
Patient_Data = read_excel("Patient Data.xlsx")
head(Patient_Data)
Patient_Data[seq(190, 198),]
Patient_Data = Patient_Data[seq(1, 189, 1),]
Patient_Data[is.na(Patient_Data$Date_Started),]
Patient_Data[is.na(Patient_Data$Date_Ended),]
library(dplyr)
Patient_Data = Patient_Data %>% filter(!is.na(Date_Started))
Patient_Data[is.na(Patient_Data$Date_Ended),]$Date_Ended = 'Ongoing'
as.Date(as.numeric(Patient_Data$Date_Ended), format =  "%Y-%m-%d", origin ="1899-12-30")
Patient_Data$Date_Ended[Patient_Data$Date_Ended == "04/12/923"] = as.Date("2023-12-04")
unique(Patient_Data$Facilty_Type)
# cols_pat = colnames(Patient_Data)
# cols_pat[3] = "Facility_Type"
# colnames(Patient_Data) = cols_pat
# colnames(Patient_Data)[3]
library(dplyr)
Patient_Data = Patient_Data %>% mutate(
Facilty_Type = ifelse(Facilty_Type == "non Resident", "Non Resident", Facilty_Type)
)
Patient_Data = Patient_Data %>% rename(Facility_Type = Facilty_Type)
Patient_Data <- Patient_Data %>%
mutate(Facility_Type = ifelse(Facility_Type == "Non Resident", "Out-Patient",
ifelse(Facility_Type == "Resident", "In-Patient", NA)))
Patient_Data$Facility_Type = factor(Patient_Data$Facility_Type, levels = c("Out-Patient", "In-Patient"))
unique(Patient_Data$Facility_Type)
library(dplyr)
# there is a challenge with casting in dplyr a step by step process is the best option
date = Patient_Data$Date_Ended
# Convert the date data with ongoing to "2024-06-04"
date[date == "Ongoing"] = "2024-06-04"
# convert all the data to numeric
# convert the numbers to dates
date_b = date[!is.na(date) & date != "2024-06-04"]
date[!is.na(date) & date != "2024-06-04"] = as.character(as.Date(as.numeric(date_b), origin = "1899-12-30"))
# format to standard date format
date
clean_Data = Patient_Data
clean_Data$Date_Ended = date
clean_Data = clean_Data %>%
mutate(Date_Started = as.Date(Date_Started, format = "%Y-%m-%d"),
Date_Ended = as.Date(Date_Ended, format = "%Y-%m-%d"))
head(clean_Data)
a = clean_Data[c(140, 33, 58), ]$Date_Started
clean_Data[148,]$Date_Started = as.Date("2023-12-15")
b = clean_Data[c(140, 33, 58), ]$Date_Ended
clean_Data[c(140, 33, 58), ]$Date_Started = b
clean_Data[c(140, 33, 58), ]$Date_Ended = a
clean_Data[c(148, 140, 33, 58), ]$Date_Ended
clean_Data[c(148, 140, 33, 58), ]$Date_Started
# clean_Data = clean_Data %>% filter(Date_Started <= Date_Ended)
# head(clean_Data)
if (any(clean_Data$Date_Started > clean_Data$Date_Ended, na.rm = TRUE)) {
swap_dates = clean_Data$Date_Started > clean_Data$Date_Ended
clean_Data[swap_dates, c("Date_Started", "Date_Ended")] = clean_Data[swap_dates, c("Date_Ended", "Date_Started")]
result = nrow(clean_Data) == 187  # Confirm that no data has been lost
} else {
result = nrow(clean_Data) == 187
}
print(result) # will print True because no data is lost
library(survival)
library(survminer)
surv_Data = data.frame(duration = as.numeric(clean_Data$Date_Ended - clean_Data$Date_Started),
event_observed = ifelse(!is.na(clean_Data$Date_Ended) & clean_Data$Date_Ended != "2024-06-04", 1, 0))
head(surv_Data)
clean_Data$duration = surv_Data$duration
clean_Data$event_observed = surv_Data$event_observed
surv_obj = Surv(time = surv_Data$duration, event = surv_Data$event_observed)
km_fit = survfit(surv_obj~Facility_Type, data = clean_Data)
summary(km_fit)
p = ggsurvplot(km_fit, data = clean_Data,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve Based on Facility Type")
breaks = c(6, 18, 36, 54, seq(100, 820, by = 100))
p$plot = p$plot + scale_x_continuous(breaks = breaks, limits = c(0,820))
p$plot
ggsurvplot(km_fit, data = clean_Data,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve Based on Facility Type")
ggsurvplot(km_fit, data = clean_Data,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve Based on Facility Type",
xlim = c(0, 900))
ggsurvplot(km_fit, data = clean_Data,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata",
ggtheme = theme_bw(),
palette = c("#E7B800", "#2E9FDF"),
xlab = "Days",
ylab = "Survival Probability",
title = "Kaplan-Meier Survival Curve Based on Facility Type",
xlim = c(0, 900,50))
